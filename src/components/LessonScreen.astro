---
// Lesson screen component for English learning app
export interface Props {
  title: string;
  description: string;
  learningPoints: string[];
  content: {
    topic: string;
    explanation: string;
    examples?: string[];
  }[];
  quiz: {
    question: string;
    options: string[];
    correctAnswer: number;
    explanation?: string;
  }[];
}

const { title, description, learningPoints, content, quiz } = Astro.props;


---
<div class="lesson-screen bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-8 max-w-4xl mx-auto">
  <!-- Lesson Header -->
  <header class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
      {title}
    </h1>
    <p class="text-lg text-gray-600 dark:text-gray-300 leading-relaxed">
      {description}
    </p>
  </header>

  <!-- Learning Points -->
  <section class="mb-8">
    <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 flex items-center">
      üéØ What you'll learn in this lesson:
    </h2>
    <ul class="space-y-2">
      {learningPoints.map(point => (
        <li class="flex items-start">
          <span class="text-green-500 mr-2 mt-1">‚úì</span>
          <span class="text-gray-700 dark:text-gray-300">{point}</span>
        </li>
      ))}
    </ul>
  </section>

  <!-- Lesson Content -->
  <section class="mb-8">
    <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-6 flex items-center">
      üìö Lesson Content
    </h2>
    
    <div class="space-y-8">
      {content.map((section, index) => (
        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 border border-gray-200 dark:border-gray-600">
          <h3 class="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4">
            {section.topic}
          </h3>
          <p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">
            {section.explanation}
          </p>
          
          {section.examples && section.examples.length > 0 && (
            <div class="mt-4">
              <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Examples:</h4>
              <div class="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4 border-l-4 border-blue-400">
                <ul class="space-y-2">
                  {section.examples.map(example => (
                    <li class="text-gray-800 dark:text-gray-200 font-mono text-sm">
                      ‚Ä¢ {example}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  </section>

  <!-- Quiz Section -->
  <section class="quiz-section">
    <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-6 flex items-center">
      üß† Quiz Time - Test Your Knowledge!
    </h2>
    
    <div id="quiz-container" class="space-y-6">
      {quiz.map((question, questionIndex) => (
        <div class="quiz-question bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/30 dark:to-blue-900/30 rounded-lg p-6 border border-purple-200 dark:border-purple-700">
          <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">
            Question {questionIndex + 1}: {question.question}
          </h3>
          
          <div class="options space-y-3" data-question={questionIndex} data-correct={question.correctAnswer}>
            {question.options.map((option, optionIndex) => (
              <label class="flex items-center p-3 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                <input 
                  type="radio" 
                  name={`question-${questionIndex}`} 
                  value={optionIndex}
                  class="mr-3 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-gray-700 dark:text-gray-300">{option}</span>
              </label>
            ))}
          </div>
          
          <div class="question-result mt-4 hidden">
            <div class="result-feedback p-4 rounded-lg border-l-4"></div>
            {question.explanation && (
              <div class="explanation mt-3 p-4 bg-gray-100 dark:bg-gray-600 rounded-lg">
                <p class="text-sm text-gray-700 dark:text-gray-300">
                  <strong>Explanation:</strong> {question.explanation}
                </p>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>

    <!-- Quiz Results -->
    <div id="quiz-results" class="mt-8 hidden">
      <div class="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/30 dark:to-blue-900/30 rounded-lg p-6 border border-green-200 dark:border-green-700">
        <h3 class="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4">
          üéâ Quiz Completed!
        </h3>
        <div class="results-summary">
          <p class="text-lg text-gray-700 dark:text-gray-300 mb-4">
            Your Score: <span id="score" class="font-bold text-green-600 dark:text-green-400"></span>
          </p>
          <div class="progress-bar bg-gray-200 dark:bg-gray-600 rounded-full h-4 mb-4">
            <div id="progress" class="bg-gradient-to-r from-green-400 to-blue-500 h-4 rounded-full transition-all duration-1000"></div>
          </div>
          <button 
            id="restart-quiz" 
            class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    </div>
  </section>
</div>

<script>
  // Quiz functionality
  class Quiz {
    private questions: NodeListOf<Element>;
    private currentQuestion: number = 0;
    private score: number = 0;
    private answers: number[] = [];

    constructor() {
      this.questions = document.querySelectorAll('.quiz-question');
      this.initializeQuiz();
    }

    private initializeQuiz(): void {
      // Add event listeners to all radio buttons
      const radioButtons = document.querySelectorAll('input[type="radio"]');
      radioButtons.forEach(radio => {
        radio.addEventListener('change', (e) => this.handleAnswer(e));
      });

      // Add restart functionality
      const restartBtn = document.getElementById('restart-quiz');
      restartBtn?.addEventListener('click', () => this.restartQuiz());
    }

    private handleAnswer(event: Event): void {
      const target = event.target as HTMLInputElement;
      const questionIndex = parseInt(target.name.split('-')[1]);
      const selectedAnswer = parseInt(target.value);
      const questionElement = target.closest('.quiz-question') as HTMLElement;
      
      // More specific debugging
      const optionsDiv = questionElement.querySelector('.options') as HTMLElement;
      const dataCorrectFromDiv = optionsDiv?.dataset.correct;
      const correctAnswer = parseInt(dataCorrectFromDiv || '0');
      
      // Store the answer
      this.answers[questionIndex] = selectedAnswer;
      
      // Show immediate feedback for this question
      this.showQuestionResult(questionElement, selectedAnswer === correctAnswer, correctAnswer);
      
      // Check if ALL questions are answered - count actual answered questions
      const answeredQuestions = this.answers.filter(answer => answer !== undefined).length;
      const totalQuestions = this.questions.length;
      
      if (answeredQuestions === totalQuestions) {
        setTimeout(() => {
          this.showFinalResults();
        }, 1500);
      }
    }

    private showQuestionResult(questionElement: HTMLElement, isCorrect: boolean, correctAnswer: number): void {
      const resultDiv = questionElement.querySelector('.question-result') as HTMLElement;
      const feedbackDiv = resultDiv.querySelector('.result-feedback') as HTMLElement;
      
      if (isCorrect) {
        feedbackDiv.className = 'result-feedback p-4 rounded-lg border-l-4 border-green-400 bg-green-50 dark:bg-green-900/30';
        feedbackDiv.innerHTML = '<p class="text-green-800 dark:text-green-200"><strong>‚úÖ Correct!</strong> Well done!</p>';
      } else {
        const correctOption = questionElement.querySelectorAll('label')[correctAnswer].textContent?.trim();
        feedbackDiv.className = 'result-feedback p-4 rounded-lg border-l-4 border-red-400 bg-red-50 dark:bg-red-900/30';
        feedbackDiv.innerHTML = `<p class="text-red-800 dark:text-red-200"><strong>‚ùå Incorrect.</strong> The correct answer is: ${correctOption}</p>`;
      }
      
      resultDiv.classList.remove('hidden');
      
      // Disable all options for this question
      const options = questionElement.querySelectorAll('input[type="radio"]');
      options.forEach(option => (option as HTMLInputElement).disabled = true);
    }

    private showFinalResults(): void {
      // Calculate score
      this.score = this.answers.reduce((score, answer, index) => {
        const questionElement = this.questions[index] as HTMLElement;
        const optionsDiv = questionElement.querySelector('.options') as HTMLElement;
        const correctAnswer = parseInt(optionsDiv?.dataset.correct || '0');
        return score + (answer === correctAnswer ? 1 : 0);
      }, 0);

      const percentage = Math.round((this.score / this.questions.length) * 100);
      
      // Update results display
      const scoreElement = document.getElementById('score');
      const progressElement = document.getElementById('progress');
      const resultsElement = document.getElementById('quiz-results');
      
      if (scoreElement) {
        scoreElement.textContent = `${this.score}/${this.questions.length} (${percentage}%)`;
      }
      
      if (progressElement) {
        progressElement.style.width = `${percentage}%`;
      }
      
      if (resultsElement) {
        resultsElement.classList.remove('hidden');
        resultsElement.scrollIntoView({ behavior: 'smooth' });
      }
    }

    private restartQuiz(): void {
      // Reset all answers and UI
      this.answers = [];
      this.score = 0;
      
      // Hide results
      const resultsElement = document.getElementById('quiz-results');
      resultsElement?.classList.add('hidden');
      
      // Reset all questions
      this.questions.forEach(question => {
        const resultDiv = question.querySelector('.question-result') as HTMLElement;
        resultDiv.classList.add('hidden');
        
        const radioButtons = question.querySelectorAll('input[type="radio"]') as NodeListOf<HTMLInputElement>;
        radioButtons.forEach(radio => {
          radio.checked = false;
          radio.disabled = false;
        });
      });
      
      // Scroll to quiz section
      document.querySelector('.quiz-section')?.scrollIntoView({ behavior: 'smooth' });
    }
  }

  // Initialize quiz when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new Quiz();
  });
</script>

<style>
  .lesson-screen {
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .quiz-question {
    transition: all 0.3s ease;
  }

  .quiz-question:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .options label:hover {
    transform: translateX(5px);
  }

  .progress-bar {
    overflow: hidden;
  }

  #progress {
    width: 0%;
  }
</style>
